version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.3

aliases:
- &ssh-fingerprint
    fingerprints:
      - "ae:83:a5:6c:93:c9:16:57:ec:21:b9:6f:9c:5a:10:9c"
- &install-dependencies
  name: Install Node Dependencies
  command: |
    npm install
    npm --prefix ./server install
- &test
  name: Test
  command: npm run test -- --collectCoverage --testResultsProcessor=jest-sonar-reporter
- &build
  name: Build
  command: npm run build
- &google-sdk-container-config
  docker:
    - image: google/cloud-sdk:latest
      auth:
        username: $DOCKERHUB_LOGIN
        password: $DOCKERHUB_PASSWORD
- &GCP-auth-docker
  name: GCP authentication with docker
  command: |
    echo $DOCKER_PASSWORD > ${HOME}/account-auth.json
- &docker-build-and-push
  name: Docker build and push
  command: |
    echo 'export CIRCLE_PROJECT_REPONAME="$CIRCLE_PROJECT_REPONAME"' >> $BASH_ENV
    echo 'export VERSION="$VERSION"' >> $BASH_ENV
    IMAGE="eu.gcr.io/entur-system-1287/${CIRCLE_PROJECT_REPONAME}"
    docker build -t ${IMAGE} .
    docker tag "${IMAGE}" "${IMAGE}":"${VERSION}"
    docker login -u _json_key --password-stdin https://eu.gcr.io < ${HOME}/account-auth.json
    docker push "${IMAGE}"
- &tag-git-version
  name: Tag git commit with build version and push to github
  command: |
    git config --global user.email "circleci@entur.no"
    git config --global user.name "circleci"
    git tag $VERSION
    git push origin $VERSION
- &create-image-version
  name: Create new image version and store to env var and as file in workspace
  command: |
    echo "export VERSION=$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)"  >> $BASH_ENV
    echo "$CIRCLE_BRANCH-v$CIRCLE_BUILD_NUM-$(echo -n $CIRCLE_SHA1 | tail -c 8)" > version
- &read-image-version
  name: Read new image version from workspace
  command: |
    echo "export VERSION=$(cat ./version)" >> $BASH_ENV
- &docker-build-and-push
  name: Docker build and push
  command: |
    IMAGE="eu.gcr.io/entur-system-1287/${CIRCLE_PROJECT_REPONAME}"
    echo "Image: ${IMAGE}"
    docker build -t $IMAGE .
    docker tag $IMAGE "${IMAGE}":"${VERSION}"
    docker login -u _json_key --password-stdin https://eu.gcr.io < ${HOME}/account-auth.json
    docker push $IMAGE
- &save-dependency-cache
  paths:
  - node_modules
  - server/node_modules
  key: node_modules-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ checksum "./server/package-lock.json" }}
- &restore-dependency-cache
  name: Restore dependency cache
  keys:
  - node_modules-v2-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}-{{ checksum "./server/package-lock.json" }}
  - node_modules-v2-


jobs:
  test-build:
    docker:
      - image: cimg/python:3.10.4-node
    steps:
    - checkout
    - restore_cache: *restore-dependency-cache
    - run: *install-dependencies
    - save_cache: *save-dependency-cache
    - run: *build
    - run: *test
    - sonarcloud/scan
  build:
    docker:
      - image: cimg/python:3.10.4-node
    steps:
    - checkout
    - restore_cache: *restore-dependency-cache
    - run: *install-dependencies
    - save_cache: *save-dependency-cache
    - run: *test
    - run: *build
    - sonarcloud/scan
    - run: *create-image-version
    - run: *tag-git-version
    - persist_to_workspace:
        root: ~/project
        paths:
          - build
          - server
          - Dockerfile
          - .circleci
          - ./version
  deploy-docker:
    <<: *google-sdk-container-config
    steps:
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - attach_workspace:
          at: ~/project
      - run: *GCP-auth-docker
      - run: *read-image-version
      - run: *docker-build-and-push
workflows:
  install-test-build-deploy:
    jobs:
    - test-build:
        context: global
        filters:
          branches:
            ignore:
            - master
    - build:
        context: global
        filters:
          branches:
            only:
            - master
    - deploy-docker:
        depends_on:
          - build
        context: global
        filters:
          branches:
            only:
            - master
